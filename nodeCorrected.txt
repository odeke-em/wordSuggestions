author emmanuel { 	
empanel:3 immanacle:3 immensely:3 }
odeke { 	
evoked:3 }
odeke ualberta { 	
bacterial:4 balustrade:4 halbert:7 halberts:6 lambert:5 lamberts:4 laureate:3 trabecula:3 }
ca ifndef { 	
finder:3 }
node h define node h include string h include assert h include stdlib { 	
stilb:4 stilbs:3 stiled:3 stolid:5 stolider:3 stolidly:3 styli:3 stylised:3 stylized:3 }
h include customtypes { 	
customable:3 customer:3 customers:5 customise:5 customised:4 customises:4 customizes:4 customs:4 cystoscope:4 }
h int { 	
anti:3 intact:3 intake:3 intend:3 intent:3 inter:4 intern:3 inters:3 inti:5 intil:4 intima:3 intime:3 intine:3 intire:3 intis:4 into:5 intoed:3 intomb:3 intone:3 intown:3 intro:4 intron:3 intros:3 intuit:3 intuse:3 inte:5 }
wordinnode { 	
wordiness:4 wording:3 }
node const { 	
camstone:3 canst:5 cantos:3 capstone:3 cenotes:4 centos:3 coast:5 coastal:3 coasted:3 coaster:3 coasting:5 coastings:4 coastline:4 coastlines:3 coasts:4 conatus:6 conceits:3 concents:3 concepts:3 concerts:3 concocts:3 conducts:3 conduits:3 cones:3 confects:3 confest:4 confutes:3 congest:4 congests:3 congrats:3 conks:3 connects:3 connotes:3 conns:3 conquest:3 cons:6 conscient:4 conscript:4 conscripts:3 consecrate:3 consectary:3 consent:6 consented:4 consenting:3 consents:5 consequent:3 conservant:3 consign:3 consilient:3 consist:6 consisted:4 consistent:3 consisting:3 consistory:3 consists:5 consociate:3 consolate:4 consolated:3 consolates:3 console:3 consols:3 consolute:4 consonant:4 consonants:3 consort:6 consorted:4 consorter:4 consorters:3 consortia:4 consorting:3 consortism:3 consortium:3 consorts:5 conspectus:3 conspirant:3 constable:6 constables:5 constancy:6 constant:7 constantan:5 constantly:5 constants:6 constate:7 constated:6 constates:6 constating:5 constative:5 constipate:5 constitute:5 constrain:6 constrains:5 constraint:5 constrict:6 constricts:5 constringe:5 construct:6 constructs:5 construe:7 construed:6 construer:6 construers:5 construes:6 construing:5 consuetude:3 consul:4 consulate:4 consulates:3 consuls:3 consult:6 consulta:5 consultant:3 consulted:4 consultee:4 consultees:3 consulter:4 consulters:3 consulting:3 consultive:3 consultor:4 consultors:3 consultory:3 consults:5 consume:3 consummate:3 consumpt:5 consumpts:4 contacts:3 contains:3 conte:3 contemns:3 contends:3 contents:3 contes:5 contessa:3 contest:4 contests:3 contexts:3 conto:3 contorts:3 contos:5 contours:3 contras:4 contrast:3 contrist:3 contr:3 controls:3 contuse:4 contused:3 contuses:3 convents:3 converts:3 convicts:3 coonties:3 coost:5 coset:3 cots:4 count:3 counters:3 countess:3 counties:3 counts:5 creston:4 crestons:3 tons:4 gunstock:3 linstock:3 monster:3 monstrance:3 nonstick:3 penstock:3 tocsin:3 tonics:3 }
word bool { 	
boil:3 bolo:4 bolos:3 boo:4 boob:3 boodle:4 boodles:3 book:3 bookful:3 booklet:3 boolean:5 boom:3 boomlet:3 boon:3 boor:3 boos:3 boot:3 bootleg:3 boozily:3 bowl:3 cool:3 dool:3 fool:3 gool:3 looby:3 mool:3 obol:4 oboli:3 obols:3 pool:3 sool:3 tool:3 toolbag:3 toolbar:3 toolbox:3 wool:3 }
sameword { 	
backwords:3 gapeworm:4 gapeworms:6 harewood:4 homeward:7 homewards:9 password:4 passwords:3 salework:6 sandwort:4 sandworts:3 scrawmed:3 someway:3 tapeworm:4 tapeworms:6 waveforms:4 }
const word const word int sortfunc { 	
contours:3 fortunes:3 }
const void const void int rankcomparison const void const void word wordcopy { 	
wordplay:4 }
const word orig { 	
brig:3 frig:3 griot:3 orgia:3 orgic:3 origami:5 origan:6 origans:5 origanum:4 origanums:3 origin:6 original:4 originals:3 originate:3 origins:5 prig:3 trig:3 triglot:3 trigon:4 trigons:3 }
if orig null return null word copy strdup { 	
disrupt:3 perdus:3 sprout:3 sprouted:4 stramped:3 stroud:5 strouds:4 stroup:7 stroups:6 strouted:3 strumpet:3 strumpeted:4 }
orig assert copy null return copy node nodealloc void return node malloc { 	
ballocks:5 callop:5 callous:4 callow:5 callower:3 callows:4 calomel:3 hallo:3 halloumi:3 mall:4 mallecho:8 malleoli:3 mallow:7 mallows:6 malls:3 millocracy:6 millocrat:7 millocrats:6 molla:4 mollah:3 mollas:3 molluscan:3 mullock:6 mulloway:3 multocular:4 }
sizeof { 	
size:4 sized:3 sizer:3 sizes:3 }
node void nodefree { 	
conferee:5 conferees:4 endorsee:3 redefine:3 underfeed:4 underfeeds:3 }
node tree node tmp while tree null tmp tree next if tree match null free tree match free tree tree null tree tmp tree null int nodeprint { 	
interponed:3 modernist:4 modernists:3 newsprint:6 pondering:5 underpin:3 }
file fp node tree input a singly linked list tree output printed attributes of the tree match matchrankage { 	
marchantia:3 marchpane:3 matchmaker:5 watchmaker:3 }
returns the number of non null nodes in the tree if fp null fp stdout { 	
stroud:5 strouds:4 strout:7 strouted:8 strouting:4 strouts:6 utmost:3 }
int nprints { 	
nerines:4 sprint:6 sprinted:4 sprinter:4 sprinters:3 sprinting:6 sprintings:5 sprints:5 uprist:3 }
node tmp int maxprintperline if tree null ifdef interactive { 	
integrate:3 interact:10 interacted:11 interacts:9 intercept:3 interchain:4 intercity:5 intercut:3 interdict:3 interest:3 interface:3 interject:3 interlace:3 intermit:3 internet:3 intersect:3 interstice:5 intertie:4 interties:3 intervale:3 intervein:3 interview:3 intervital:7 intricate:4 inveracity:7 }
fprintf { 	
forint:5 forints:4 sprint:5 sprinted:3 sprinter:3 sprints:4 }
stderr { 	
sider:3 siderate:3 siderite:3 starer:3 starred:3 steard:3 stirred:3 storer:3 underrates:4 }
suggestions { 	
subjection:3 subreption:3 subsection:6 succession:6 suggest:6 suggested:4 suggester:4 suggesters:6 suggesting:11 suggestion:18 suggestive:8 suggests:8 surjection:3 }
m endif { 	
eldin:3 ending:4 endings:3 endite:4 endited:3 endites:3 endive:4 endives:3 enfilade:3 enfiled:4 enfix:3 enfixed:4 undefied:3 ungifted:3 unrifled:3 unsifted:3 }
fprintf fp t n for tmp tree tmp null tmp tmp next fprintf fp s d tmp match tmp matchrank { 	
earthman:3 marchantia:4 marchland:6 marchlands:5 marchman:7 marchpane:6 matachin:3 matchboard:3 matchbook:3 matcher:3 matchlock:3 matchmaker:8 ranchman:3 trackman:4 watchband:3 watchmaker:6 watchman:7 }
nprints if nprints maxprintperline fprintf fp n fprintf fp n ifdef interactive fprintf stderr t n m endif return nprints node addword node tree const word query int rankmatch { 	
hackmatack:3 racemation:3 }
if query null return tree if tree null tree nodealloc tree match wordcopy query if tree match null printf { 	
driftpin:4 driftpins:3 paint:3 painter:4 painters:3 paintier:3 painture:3 point:3 pointer:4 pointers:3 prenotify:3 prent:3 prentice:3 prenting:3 prink:3 print:8 printable:4 printed:6 printer:6 printeries:3 printers:5 printery:5 printhead:4 printheads:3 printing:5 printings:4 printless:4 printmaker:3 prints:7 pristane:3 pristine:3 prunt:3 }
found null word n assert tree tree matchrank rankmatch tree next null else if sameword tree match query false tree next addword tree next query rankmatch return tree bool sameword const word w const word w if w null w null return invalid int w len { 	
line:3 lane:3 lean:3 lend:5 lender:3 lends:4 lenes:4 leng:5 lenger:3 length:3 lenify:3 lenis:4 lenity:3 leno:5 lenos:4 lens:5 lenses:3 lent:5 lenten:3 lenti:4 lentic:3 lentil:3 lento:4 lentor:3 lentos:3 lenvoy:3 lone:3 lune:3 }
strlen { 	
antlers:3 style:3 larcenist:3 runlets:3 saltern:3 sarcenet:3 sarment:4 sarmenta:3 sarments:3 sarsenet:3 sirvente:3 sorbent:4 sorbents:3 stale:3 staleness:4 staler:5 stelar:3 stelene:4 sternal:3 sternly:3 stile:3 stole:3 stolen:7 stolenwise:3 stoner:3 strae:3 strained:3 strainedly:4 strainer:3 strangely:3 strangle:4 strangled:3 strangler:3 strangles:3 strapline:3 streel:3 strene:3 strewn:5 strinkle:4 strinkled:3 strinkles:3 strongyle:3 styrene:4 styrenes:3 surgent:4 sutler:3 }
w querylen { 	
queenlier:4 queenly:6 queerly:6 querimony:3 query:4 querying:4 queryingly:5 queryings:3 }
strlen w if w len querylen return false int lastidx { 	
bastide:4 bastides:3 lassitude:3 lasted:5 lasting:4 listed:3 lustihead:3 pastil:3 }
w len bool extremelettermatch w w w lastidx w lastidx if extremelettermatch false return false return strcmp { 	
scrimp:5 scrimped:3 scrimpiest:4 scrimply:3 scrimps:4 scrimpy:4 scrump:5 scrumped:3 scrumple:3 scrumps:4 scrumpy:4 stramp:7 stramped:5 stramping:4 stramps:6 strum:3 strumpet:5 strumpeted:3 strumpets:4 }
w w bool serializenode { 	
genialised:3 genialize:3 genialized:5 genializes:5 serialise:5 serialised:7 serialises:4 serialize:10 serialized:12 serializes:9 socialized:3 vernalized:3 vernalizes:3 }
node tree file outfp { 	
outface:3 outfall:3 outfit:4 outfits:3 outflew:3 outflow:3 outfly:4 outfoot:3 outfox:4 outspan:3 potful:3 }
node tmp bool wrotetofilebool false if tree null for tmp tree tmp null tmp tmp next fprintf outfp s n tmp match wrotetofilebool true return wrotetofilebool bool wordinnode node tree const word query returns invalid if either tree or word is null true if word was found false otherwise if query null tree null return invalid struct { 	
scrunt:3 scrutator:3 scruto:3 sprucest:3 straucht:4 strauchts:3 striatum:3 strict:7 stricter:5 strictest:4 strictish:4 strictly:5 strictness:3 stricture:7 strictured:6 strictures:6 strout:5 strouted:3 strouts:4 struck:7 structural:8 structure:9 structured:8 structures:8 strum:3 strumatic:5 strumpet:3 strunt:7 strunted:5 strunting:4 strunts:6 strut:6 struts:5 strutted:3 strutter:3 thrust:3 }
node tmp for tmp tree tmp null tmp tmp next bool stringmatch { 	
sterigmata:4 straighten:3 stringent:4 stringhalt:9 strongman:4 }
sameword query tmp match if stringmatch true return true else if stringmatch invalid return invalid return false endif 