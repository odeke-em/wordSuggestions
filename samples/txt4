 %s func %s\n",srcPath,__func__);
  #endif

  word learntPath = newWord(pathLen+1);
  word correctedPath = newWord(pathLen+1);

  sprintf(learntPath, "%sL", srcPath);
  sprintf(correctedPath, "%sC", srcPath);

  FILE *srcfp = fopen(srcPath,"r");
  FILE *words_learnt_ifp = fopen(learntPath,"r+w");
  FILE *correctedfp = fopen(correctedPath,"w");

  wordArrayStruct *dictWArrStruct = nav->dictWArrayStruct;
  if (words_learnt_ifp == NULL){
   words_learnt_ifp = fopen(learntPath,"w");
  } 

  Node *storage = NULL;

  while (! feof(srcfp)){
    word srcWord = getWord(srcfp, isalpha);
    if (srcWord == NULL) continue;

    //Word Comparison will be done in lower case
    toLower(srcWord);

    #ifdef DEBUG
      fprintf(stderr,"srcWord %s\n",srcWord);
    #endif

    wordMatchCriteria matchCriteria;
    matchCriteria.lenMatch_bool = False; 
    matchCriteria.firstLetterMatch_bool = False; 

    storage = getSuggestions(
      dictWArrStruct, correctedfp, storage, srcWord, matchCriteria
    );

    if (srcWord != NULL)  free(srcWord);
  }

  //Time to write to memory matched words
  fprintf(
    words_learnt_ifp,"#Words learnt from examining file %s\n", srcPath
  );

  if(serializeNode(storage,words_learnt_ifp) == True){
    fprintf(
      stderr,"\033[32mWrote the learnt words to file \"%s\"\033[00m\n", 
      learntPath
    );
  }

  //And give unto OS, what belongs to OS -- release memory
  nodeFree(storage);

  free(learntPath);
  free(correctedPath);

  fclose(srcfp);
  fclose(correctedfp);
  fclose(words_learnt_ifp);

  return NULL;
}
